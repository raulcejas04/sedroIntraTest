(self["webpackChunk"] = self["webpackChunk"] || []).push([["validarFormularios"],{

/***/ "./assets/validator.js":
/*!*****************************!*\
  !*** ./assets/validator.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");

__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");

$(document).ready(function () {
  $('input[type=text]').each(function (index) {
    var input = $(this);
    console.log('Type: ' + input.attr('type') + ' | Name: ' + input.attr('name') + ' | Value: ' + input.val());
    var myClass = $(this).attr("class"); //es del tipo CUIT

    if (myClass.indexOf("val-cuit") >= 0) {
      input.bind("change blur", function (event) {
        input[0].setCustomValidity("");

        if (!isValidCUITCUIL(input.val())) {
          input[0].setCustomValidity("Cuit/Cuil inválido"); //console.log( input.attr('id'));

          console.log($("#err_nueva_solicitud_cuit").html());
          $("#err_" + input.attr('id')).html("Cuit/Cuil inválido"); //$("#err_nueva_solicitud_cuit").html("Cuit/Cuil inválido");

          $("#err_" + input.attr('id')).css('color', 'red'); // TODO es provisorio, habría que sacarlo y hacerlo desde CSS
        } else {
          $("#err_" + input.attr('id')).html('');
        }
      });
      input.bind('keydown', function (event) {
        if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') return;
        input.selectionStart = input.textLength;
        input.selectionEnd = input.textLength;
        input.val(input.val()[1] && input.val()[2] !== '-' ? input.val().slice(0, 2) + '-' + input.val().slice(2) : input.val());
        input.val(input.val()[10] && input.val()[11] !== '-' ? input.val().slice(0, 11) + '-' + input.val().slice(11) : input.val());

        if (event.key === 'Backspace' && input.selectionStart === 3 && input.selectionEnd === 3 && input.textLength === 3) {
          event.preventDefault();
          input.val(input.val().slice(0, -2));
          return;
        }

        if (event.key === 'Backspace' && input.selectionStart === 12 && input.selectionEnd === 12 && input.textLength === 12) {
          event.preventDefault();
          input.val(input.val().slice(0, -2));
        }
      });
      input.bind('keypress', function (event) {
        if (!validator.isNumeric(event.key) || input.textLength >= 13) event.preventDefault();
      });
    }
  });
  $('input[type=email]').each(function (index) {
    var input = $(this);
    console.log('Type: ' + input.attr('type') + ' | Name: ' + input.attr('name') + ' | Value: ' + input.val());
    var myClass = $(this).attr("class");

    if (myClass.indexOf("val-email") >= 0) {
      console.log("mail");
      input.bind("change blur", function (event) {
        input[0].setCustomValidity("");

        if (!validator.isEmail(input.val())) {
          input[0].setCustomValidity("Mail invalido");
          console.log(input.attr('id'));
          input.val('');
          input.focus();
          document.getElementById(input.attr('id')).focus();
          event.preventDefault();
          return false;
        }
      });
    }
  });
});

function isValidCUITCUIL(cuit) {
  if (cuit.length !== 13) return false;
  var rv = false;
  var resultado = 0;
  var cuit_nro = cuit.replace("-", "");
  var codes = "6789456789";
  var verificador = parseInt(cuit_nro[cuit_nro.length - 1]);
  var x = 0;

  while (x < 10) {
    var digitoValidador = parseInt(codes.substring(x, x + 1));
    if (isNaN(digitoValidador)) digitoValidador = 0;
    var digito = parseInt(cuit_nro.substring(x, x + 1));
    if (isNaN(digito)) digito = 0;
    var digitoValidacion = digitoValidador * digito;
    resultado += digitoValidacion;
    x++;
  }

  resultado = resultado % 11;
  rv = resultado === verificador;
  return rv;
}

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors-node_modules_core-js_internals_create-property_js-node_modules_core-js_internals_expo-8352de","vendors-node_modules_core-js_modules_es_array_index-of_js-node_modules_core-js_modules_es_arr-f04d09"], () => (__webpack_exec__("./assets/validator.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,